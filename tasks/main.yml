---

- become: True
  block:
  
  - name: Install the Postgres Repos
    yum:
      name: "{{ postgres_server_repo_url }}"
      state: installed

  - name: Install Postgresql Packages
    yum:
      name: "{{ postgres_server_packages }}"
      state: installed
  
  - name: Check if Postgres database is initialized
    stat:
      path: "{{ postgres_server_path }}/PG_VERSION"
    register: pgdata_dir_version

  - name: Create the Postgres directory structure
    file:
      path: "{{ postgres_server_path }}"
      state: directory
      owner: postgres
      group: postgres
    when: not pgdata_dir_version.stat.exists

  - name: Set the SELinux file context on the path
    sefcontext:
      target: "{{ postgres_server_path }}(/.*)?"
      setype: postgresql_db_t
    when: not pgdata_dir_version.stat.exisits and ansible_selinux.mode == 'enforcing'

  - name: Ensure Postgres database is initialized
    command: "/usr/pgsql-{{ postgres_server_version }}/bin/initdb -D {{ postgres_server_path }}"
    when: not pgdata_dir_version.stat.exists
  
  - name: Make the service.d directory
    file:
      path: "/etc/systemd/system/postgresql-{{ postgres_server_version }}.service.d"
      state: directory

  - name: Configure the service
    template:
      src: "{{ item.src }}"
      dest: "{{ item.dest }}"
    with_items:
      - { src: pg_hba.conf.j2, dest: "{{ postgres_server_path }}/pg_hba.conf" }
      - { src: postgresql.conf.j2, dest: "{{ postgres_server_path }}/postgresql.conf" }
      - { src: postgresql.service.j2, dest: "/etc/systemd/system/postgresql-{{ postgres_server_version }}.service.d/pgdata.conf" }
    notify: Restart Postgresql

  - name: Start and enable Postgres
    systemd:
      name: "postgresql-{{ postgres_server_version }}.service"
      state: started
      enabled: yes
      daemon_reload: True

  - name: Open the port in the firewall
    firewalld:
      service: postgresql
      state: enabled
      permanent: True
      immediate: True

  - become_user: postgres
    block:
    - name: Create databases
      postgresql_db:
        name: "{{ item }}"
      loop: "{{ postgres_server_databases }}"

    - name: Create users
      postgresql_user:
        db: "{{ item.database }}"
        name: "{{ item.username }}"
        password: "{{ item.password|default(NULL) }}"
      loop: "{{ postgres_server_users }}"

